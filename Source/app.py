# app.py - Updated ƒë·ªÉ s·ª≠ d·ª•ng multi-agent system
import gradio as gr
import asyncio
from orchestrator import answer_with_agents

class MultiAgentKinhDichApp:
    """Gradio app using multi-agent system"""
    
    def create_interface(self):
        """Create Gradio interface"""
        
        with gr.Blocks(title="Multi-Agent Kinh D·ªãch Chatbot", theme=gr.themes.Soft()) as interface:
            
            gr.Markdown("# ü§ñ Multi-Agent Kinh D·ªãch Chatbot")
            
            with gr.Row():
                with gr.Column(scale=2):
                    chatbot_ui = gr.Chatbot(
                        type="messages",
                        height=500,
                        label="Cu·ªôc tr√≤ chuy·ªán",
                        render_markdown=True
                    )
                    
                    with gr.Row():
                        msg_box = gr.Textbox(
                            placeholder="Nh·∫≠p c√¢u h·ªèi v·ªÅ Kinh D·ªãch...",
                            label="Tin nh·∫Øn",
                            scale=4
                        )
                        send_btn = gr.Button("G·ª≠i", variant="primary", scale=1)
                
                with gr.Column(scale=1):
                    user_name = gr.Textbox(label="T√™n (t√πy ch·ªçn)")
                    
                    # Agent monitoring
                    with gr.Accordion("ü§ñ Agent Monitoring", open=False):
                        agent_stats = gr.JSON(label="Agent Performance")
                        reasoning_display = gr.JSON(label="Reasoning Chain")
                    
                    clear_btn = gr.Button("X√≥a cu·ªôc tr√≤ chuy·ªán")
            
            # Event handlers
            def respond_sync(message, history, user_name):
                """Sync wrapper cho async function"""
                if not message.strip():
                    return history, "", {}, []
                
                # Run async function
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    result = loop.run_until_complete(answer_with_agents(message, user_name))
                finally:
                    loop.close()
                
                # Add to chat history
                history.append(gr.ChatMessage(role="user", content=message))
                history.append(gr.ChatMessage(role="assistant", content=result["answer"]))
                
                return (history, "", result.get("agent_stats", {}), 
                       result.get("reasoning_chain", []))
            
            # Bind events
            send_btn.click(
                respond_sync,
                inputs=[msg_box, chatbot_ui, user_name],
                outputs=[chatbot_ui, msg_box, agent_stats, reasoning_display]
            )
            
            msg_box.submit(
                respond_sync,
                inputs=[msg_box, chatbot_ui, user_name],
                outputs=[chatbot_ui, msg_box, agent_stats, reasoning_display]
            )
            
            clear_btn.click(lambda: ([], {}, []), outputs=[chatbot_ui, agent_stats, reasoning_display])
            
            # Examples
            gr.Examples(
                examples=[
                    "Qu·∫ª C√°ch c√≥ √Ω nghƒ©a g√¨ trong Kinh D·ªãch?",
                    "Tri·∫øt l√Ω √¢m d∆∞∆°ng ƒë∆∞·ª£c hi·ªÉu nh∆∞ th·∫ø n√†o?",
                    "T√¥i gieo ƒë∆∞·ª£c ng·ª≠a-√∫p-√∫p-ng·ª≠a-ng·ª≠a-√∫p, cho t√¥i l·ªùi khuy√™n"
                ],
                inputs=msg_box
            )
        
        return interface

def main():
    """Launch multi-agent app"""
    app = MultiAgentKinhDichApp()
    interface = app.create_interface()
    
    print("ü§ñ Multi-Agent Kinh D·ªãch Chatbot")
    print("üöÄ Agents: Dispatcher ‚Üí Linguistics ‚Üí Retrieval ‚Üí Reasoning")
    print("üåê Access: http://localhost:7860")
    
    interface.launch(
        server_name="127.0.0.1",
        server_port=7860,
        inbrowser=True
    )

if __name__ == "__main__":
    main()
